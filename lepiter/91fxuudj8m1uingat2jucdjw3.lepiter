{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T16:05:18.24356+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-07-08T16:11:47.918176+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "srZgxtzXDQCw1uHdC8IszQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : " [[SmaCC]] is a parsing engine. It comes out of the box with various parsers (see [[How to parse sources in different languages]]).."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T12:01:22.057843+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T21:22:04.84824+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "cEjwXNnXDQCEatZ+BqGymA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "One use of it is for code analysis purposes."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T16:03:55.674127+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T16:18:28.858203+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "/s90wdzXDQCR4b4tBqGymA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The result of parsing is an abstract syntax tree [[AST]] Let's consider this [[JavaScript]] source code (on the left) and its associated AST (on the right). Click around to navigate between the two perspectives."
			},
			{
				"__type" : "exampleSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T16:08:17.900411+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T16:08:17.900411+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "GBEW0dzXDQCz+BiVC8IszQ=="
				},
				"exampleSelector" : "jsAST",
				"previewHeight" : 300,
				"previewShowSelector" : "gtExploreFor:",
				"exampleBehaviorName" : "GtSmaCCQueryExamples",
				"codeExpanded" : true,
				"previewExpanded" : false,
				"noCode" : true
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T17:43:27.3446+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T18:10:17.563284+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "00JlJd7XDQCCSi7TC8IszQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The AST is, like its name says, a tree. In SmaCC, all nodes inherit from {{gtClass:SmaCCParseNode}}. This class provides an interesting query API."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [
						{
							"__type" : "exampleSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T18:10:51.055542+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T18:10:51.055542+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "XU1eh97XDQCGNX9aC8IszQ=="
							},
							"exampleSelector" : "jsFunctions",
							"previewHeight" : 200,
							"previewShowSelector" : "gtViewsFor:",
							"exampleBehaviorName" : "GtSmaCCQueryExamples",
							"codeExpanded" : true,
							"previewExpanded" : false,
							"noCode" : false
						}
					]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T18:10:17.798478+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T20:52:22.431886+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "0NZihd7XDQCDoXbZC8IszQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "For example, let's assume you want to find all the defined functions from the AST. You can just use {{gtMethod:SmaCCParseNode>>#//}}:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T20:52:34.661882+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T20:53:21.022486+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "8Pzlgt/XDQCHFPjNC8IszQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The above queries looks for nodes in the tree that have the `function` in their name. In this case, we will get instances of {{gtClass:JSFunctionNode}}. But sometimes we want more elaborate ways to search."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [
						{
							"__type" : "exampleSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T20:53:49.165236+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T20:53:49.165236+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "OmgwzuDXDQCMlvW1C8IszQ=="
							},
							"exampleSelector" : "jsCallsWith10AsArg",
							"previewHeight" : 200,
							"previewShowSelector" : "gtViewsFor:",
							"exampleBehaviorName" : "GtSmaCCQueryExamples",
							"codeExpanded" : true,
							"previewExpanded" : false,
							"noCode" : false
						}
					]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T20:54:36.219878+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T20:55:26.64309+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "fV+dzuDXDQCMnmvxC8IszQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "How about this: find all function calls that have as parameter a literal whose value equals `10`. The example below does exactly that:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T20:56:52.052673+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T20:57:18.890552+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "8w0X2eDXDQCQ/esXC8IszQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "First, we look for literals."
						},
						{
							"__type" : "exampleSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T20:57:01.612288+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T20:57:01.612288+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "+Oyo2eDXDQCRBJAZC8IszQ=="
							},
							"exampleSelector" : "jsLiterals",
							"previewHeight" : 200,
							"previewShowSelector" : "gtViewsFor:",
							"exampleBehaviorName" : "GtSmaCCQueryExamples",
							"codeExpanded" : true,
							"previewExpanded" : false,
							"noCode" : false
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T20:57:23.527411+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T21:02:11.304794+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "t1L32uDXDQCR7dP1C8IszQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "Then we look at literals with value `10`. We do this by composing the previous query with {{gtMethod:SmaCCParseNode>>#@}} for getting the value attribute which is then combined with {{gtMethod:GtSmaCCAttributeQuery>>#<-}} which checks for specific values."
						},
						{
							"__type" : "exampleSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T20:58:31.688604+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T20:58:31.688604+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "+2AH3+DXDQCSuhH5C8IszQ=="
							},
							"exampleSelector" : "jsLiteralsWithValue10",
							"previewHeight" : 200,
							"previewShowSelector" : "gtViewsFor:",
							"exampleBehaviorName" : "GtSmaCCQueryExamples",
							"codeExpanded" : true,
							"previewExpanded" : false,
							"noCode" : false
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T20:58:46.536056+02:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2024-06-22T21:00:44.898223+02:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "SuWP3+DXDQCSwrlFC8IszQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "This gives us two interesting literals, but we want the calls, not the literals. So, at the end of the query we traverse parents using {{gtMethod:SmaCCParseNode>>#\\\\}}."
						}
					]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T20:55:37.29392+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-06-22T20:57:12.596557+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "PVWi1ODXDQCQMfijC8IszQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Let's unwrap what happens here."
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2024-06-22T12:01:01.994093+02:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2024-06-22T14:51:28.218176+02:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Querying SmaCC abstract syntax trees (ASTs)"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "f319cc5c-d9d7-0d00-8469-b95e06a1b298"
	}
}