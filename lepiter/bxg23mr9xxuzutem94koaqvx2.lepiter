{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.483493-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.483493-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "IsT+v0j+DQCu95LcDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "SmaCC is a GLR parser generator. It generates both scanner and parser classes from a single definition. The scanner class transforms a string or stream of characters into a stream of tokens. The parser uses the tokens to create abstract syntax tree (AST) or whatever object that is defined by the grammar. "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.48795-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.48795-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "a9X+v0j+DQCu+LosDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Scanner grammar"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.489528-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.489528-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "nNv+v0j+DQCu+aWtDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The scanner grammar is defined by token rules:"
			},
			{
				"__type" : "blockQuoteSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.490961-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.490961-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "J+H+v0j+DQCu+hRLDwF/yQ=="
				},
				"string" : "<TokenName> : RegularExpression ;"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510398-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510398-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "EC3/v0j+DQCu/ArWDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\character` : Matches a special character. The character immediately following the backslash is matched exactly, unless it is a letter. Backslash-letter combinations have other meanings and are specified below."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510444-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510444-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "Ly3/v0j+DQCu/Wk0DwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\cLetter` : Matches a control character. Control characters are the first 26 characters (e.g., `\\cA` equals `Character value: 0`). The letter that follows the `\\c` must be an uppercase letter."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510453-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510453-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "Ny3/v0j+DQCu/g1/DwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\d` : Matches a digit, 0-9."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510457-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510457-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "Oi3/v0j+DQCu/zz9DwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\D` : Matches anything that is not a digit."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510465-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510465-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "Qy3/v0j+DQCvADUKDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\f` : Matches a form-feed character, `Character value: 12`."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510468-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510468-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "RS3/v0j+DQCvAT+QDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\n` : Matches a newline character, `Character value: 10`."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510471-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510471-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "SC3/v0j+DQCvAhh0DwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\r` : Matches a carriage return character, `Character value: 13`."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510473-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510473-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "Sy3/v0j+DQCvA4faDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\s` : Matches any whitespace character, `[ \\f\\n\\r\\t\\v]`."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510477-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510477-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "Ty3/v0j+DQCvBBL3DwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\S` : Matches any non-whitespace character."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.51048-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.51048-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "US3/v0j+DQCvBUUsDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\t` : Matches a tab, `Character value: 9`."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510484-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510484-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "VS3/v0j+DQCvBlThDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\v` : Matches a vertical tab, `Character value: 11`."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510487-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510487-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "WC3/v0j+DQCvB7KeDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\w` : Matches any letter, number or underscore, `[A-Za-z0-9_]`."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510493-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510493-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "Xi3/v0j+DQCvCNQgDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\W` : Matches anything that is not a letter, number or underscore."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510497-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510497-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "Yi3/v0j+DQCvCZx3DwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`\\xHexNumber` : Matches a character specified by the hex number following the `\\x`. For example, `\\x20` matches the space character (`Character value: 16r20`), and `\\x1FFF` matches `Character value: 16r1FFF`."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510501-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510501-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "Zy3/v0j+DQCvClSDDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`<token>` : Copies the definition of `<token>` into the current regular expression. For example, if we have `<hexdigit> : \\d | [A-F] ;`, we can use `<hexdigit>` in a later rule: `<hexnumber> : <hexdigit> + ;`."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510504-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510504-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "aS3/v0j+DQCvC57XDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`<isMethod>` : Copies the characters where `Character>>isMethod` returns true into the current regular expression. For example, instead of using `\\d`, we could use `<isDigit>` since {{gtMethod:Character>>isDigit}} returns true for digits."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510507-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510507-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "bC3/v0j+DQCvDEtLDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`[characters]` : Matches one of the characters inside the `[]`. This is a shortcut for the `|` operator. In addition to single characters, you can also specify character ranges with the `-` character. For example, `[a-z]` matches any lower case letter."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510509-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510509-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "by3/v0j+DQCvDT21DwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`[^characters]` : Matches any character not listed in the characters block. `[^a]` matches anything except for `a`."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510512-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510512-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "cS3/v0j+DQCvDjjaDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`[[boolean expression]]` : Evaluates the code inside the `[[]]`. If the code returns true then scanning of this regular expression continues. This can be used to test if a token occurs in a particular column or position in the input."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510517-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510517-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "di3/v0j+DQCvD5LlDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`.` : Matches any character."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510521-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510521-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "ey3/v0j+DQCvEB9YDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`# comment` : Creates a comment that is ignored by SmaCC. Everything from the `#` to the end of the line is ignored."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510524-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510524-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "fS3/v0j+DQCvEd3RDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`exp1 | exp2` : Matches either `exp1` or `exp2`."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510529-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510529-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "gi3/v0j+DQCvEsyEDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`exp1 exp2` : Matches `exp1` followed by `exp2`. `\\d \\d` matches two digits."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510532-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510532-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "hS3/v0j+DQCvExcxDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`exp*` : Matches `exp` zero or more times. `0*` matches \"\" and \"`000`\"."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510534-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510534-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "hy3/v0j+DQCvFLnZDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`exp?` : Matches `exp` zero or one time. `0?` matches only \"\" or \"`0`\"."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510537-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510537-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "ii3/v0j+DQCvFVZUDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`exp{min,max}` : Matches `exp` at least `min` times but no more than `max` times. `0{1,2}` matches only \"`0`\" or \"`00`\". It does not match \"\" or \"`000`\"."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510539-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.510539-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "jS3/v0j+DQCvFrprDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`(exp)` : Groups `exp` for precedence. For example, `(a b)*` matches \"`ababab`\". Without the parentheses, `a b *` would match \"`abbbb`\" but not \"`ababab`\"."
						}
					]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.510375-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.510375-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "7iz/v0j+DQCu+22jDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Each token has a `TokenName` that is a valid Smalltalk variable name and must be surrounded by the `<>` characters. After the `<TokenName>` is a colon (`:`) character. Every token rule must end with a semicolon (`;`). `RegularExpression` is a regular expressions that matches one or more characters. There are many different syntaxes for regular expressions. SmaCC uses the following syntax for its regular expressions:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.515423-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.515423-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "o0D/v0j+DQCvFwhkDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Since there are multiple ways to combine expressions, we need precedence rules for their combination. The or operator, `|`, has the lowest precedence and the `*`, `?`, `+`, and `{,}` operators have the highest precedence. For example, `a | b c *` matches \"`a`\" or \"`bcccc`\", but not \"`accc`\" or \"`bcbcbc`\". If you wish to match \"`a`\" or \"`b`\" followed by any number of `c`'s, you need to use `(a | b) c *`."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.516114-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.516114-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "VUP/v0j+DQCvGB37DwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###Token methods"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.517545-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.517545-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "7Ej/v0j+DQCvGXdbDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "If your scanner has a method name that matches the name of the token, (e.g. `whitespace`), that method will get called upon a match of that type. The {{gtClass:SmaCCScanner}} superclass already has a default implementation of {{gtMethod:SmaCCScanner>>whitespace}} and {{gtMethod:SmaCCScanner>>comment}}. These methods ignore those tokens by default. "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.518194-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.518194-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "dEv/v0j+DQCvGjjJDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###Unreferenced tokens"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.51889-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.51889-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "LE7/v0j+DQCvG0aCDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "If a token is not referenced from a grammar specification, it will not be included in the generated scanner, unless the token's name is also a name of a method (see previous section). This, coupled with the ability to do substitutions, allows you to have the equivalent of macros within your scanner specification. However, be aware that if you are simply trying to generate a scanner, you will have to make sure that you create a dummy parser specification that references all of the tokens that you want in the final scanner."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.5195-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.5195-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "jVD/v0j+DQCvHDOWDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Parser grammar"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.52029-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.52029-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "pFP/v0j+DQCvHdKXDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Parsing converts the stream of tokens provided by the scanner into some object. Normally, this object will be a abstract syntax tree (AST) or parse tree, but it does not have to be an AST. For example, the [SmaCC tutorial](http://www.refactoryworkers.com/SmaCC/Tutorial.html) shows a calculator. This calculator does not produce a parse tree; it produces the result, a number."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.520886-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.520886-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+FX/v0j+DQCvHuQHDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###Production rules"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.521749-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.521749-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Vln/v0j+DQCvH7vnDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The production rules contains the definition of the parser. The first production rule is considered to be the starting rule for the parser. Each production rule consists of a non-terminal symbol name followed by a `:` separator which is followed by a list of possible productions separated by vertical bar, `|`, and finally terminated by a semicolon, `;`. "
			},
			{
				"__type" : "blockQuoteSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.523264-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.523264-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Vl//v0j+DQCvIGZKDwF/yQ=="
				},
				"string" : "Production : <someToken> AnotherProduction \"end\" ;"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.524575-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.524575-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "mmT/v0j+DQCvIZZSDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Each production consists of a sequence of production rule names, token names, or keywords followed by some optional Smalltalk code enclosed in curly `{}` or square `[]` brackets or a AST node definition enclosed in two curly brackets, `{{}}`. Production rule names are valid Smalltalk variable names and must be defined somewhere in the parser definition. Forward references are valid. Tokens are enclosed in angle brackets as they are defined in the scanner grammar above and keywords are enclosed in double-quotes (e.g., `\"then\"`). Keywords that contain double-quotes need to have two double-quotes per each double-quote in the keyword. For example, if you need a keyword for one double-quote character, you would need to enter `\"\"\"\"` (four double-quote characters). Productions can use `()` to group items and also `?`, `*`, and `+` modifiers to specify the number of occurrences for an item similar to what is allowed in the scanner definition above."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.525674-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.525674-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "zGj/v0j+DQCvIgGSDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The Smalltalk code is evaluated whenever that production is matched. If the code is a zero or a one argument symbol, then that method is performed. For a one argument symbol, the argument is an OrderedCollection that contains one element for each item in the production. If the code isn't a zero or one argument symbol, then the code is executed and whatever is returned by the code is the result of the production. If no Smalltalk code is specified, then the default action is to execute the {{gtMethod:SmaCCParser>>reduceFor:}} method (unless you are producing an AST parser). This method converts all items into an {{gtClass:OrderedCollection}}. If one of the items is another OrderedCollection, then all of its elements are added to the new collection."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.52684-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.52684-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "QW3/v0j+DQCvIzgoDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Inside the Smalltalk code you can refer to the values of each production item by using literal strings. The literal string, `'1'`, refers the to value of the first production item. The values for tokens and keywords will be {{gtClass:SmaCCToken}} objects. The value for all non-terminal symbols will be whatever the Smalltalk code evaluates to for that non-terminal symbol. While you can reference every value using an integer for the name in the Smalltalk code, using an index makes it difficult to modify the grammar. For example, if you add something to the beginning of a rule, then you must modify all of the indices in the Smalltalk code. Instead you can name each symbol in the production and then refer to the name in the Smalltalk code. To name a symbol (non-terminal, token, or keyword), you need to add a single-quoted variable name after the symbol in the grammar. For example, `MySymbol : Expression 'expr' \"+\" <number> 'num' {expr + num value asInteger} ;` creates two named variables. One for the non-terminal Expression and one for the `<number>` token. These variables are then used in the Smalltalk code."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.527488-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.527488-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "wm//v0j+DQCvJPRGDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###AST generation"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.528539-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.528539-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "4XP/v0j+DQCvJTjlDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "To generate an AST from the parser, you need to specify a root class for the AST hierarchy using the `%root RootClass;` directive. The `RootClass` will be combined with the `%prefix Prefix;` and `%suffix Suffix;` directives to create a new AST class (`PrefixRootClassSuffix`) as a subclass of {{gtClass:SmaCCParseNode}}.  The `%root` directive is required to create an AST, but the `%prefix` and `%suffix` directives are optional. "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.529651-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.529651-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "NXj/v0j+DQCvJmaaDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Except for the `%root` class, classes are named based on their names inside the `{{}}` part of a production rule. If the name is explicitly defined, then a class with the `%prefix` and `%suffix` added will be created. For example, if we have `{{Something}}` and with the `%prefix Prefix;` and `%suffix Suffix;` directives, we would create a `PrefixSomethingSuffix` class name. This class would be a direct subclass of the `%root` class unless it was defined in a `%hierarchy` directive. If a production rule contains only a `{{}}` without a name, then the production's name will be used as the class name. If the name is in snake case, it will be converted to camel case to match Smalltalk's class naming strategy. For example, a production like this `my_production : {{}};` would create a `PrefixMyProductionSuffix` class given the `%prefix` and `%suffix` directives above."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.530448-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.530448-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "VHv/v0j+DQCvJyZkDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Named symbols in a production will be converted into instance variables of the generated AST node. If the name can occur multiple times, then the name will be pluralized and the variable will hold a collection. For example, a production like this `prod : <integer> 'value'+ {{}};` will create a `PrefixProdSuffix` class with a `values` instance variable."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.53116-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.53116-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Gn7/v0j+DQCvKJN8DwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Not every production needs to specify an AST node name `{{}}`. If a production doesn't specify a name, then its variables will be added to all productions that use it. "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.531985-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.531985-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "UoH/v0j+DQCvKbr4DwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The `%hierarchy Superclass (Subclass1 Subclass2);` directive can be used to create a hierarchy of the AST classes. For example, this directive would create a `PrefixSuperclassSuffix` class that has `PrefixSubclass1Suffix` and `PrefixSubclass2Suffix` as its subclasses. Variables that are common among all of the subclasses will be pushed up to the superclass. Also, the names listed in the `%hierarchy` directive do not need to exist inside any production rule. They will be created even if they are not listed."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.53251-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.53251-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "X4P/v0j+DQCvKgKMDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Directives"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.536911-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.536911-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "kZT/v0j+DQCvLGrJDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`%start` : The `%start` directive lists other potential starting states for the parser. Without listing any starting production, SmaCC generates a parser that starts with the first production in the file.  To use one of the `%start` productions, you need to use the {{gtMethod:SmaCCParser class>>parse:startingAt:}}. The value of the second argument comes from one of the `startingStateFor` methods that is generated from the `%start` directive. For example, if you have `%start Expression;`, you can parse with the `startingAt:` argument of `startingStateForExpression`."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.536918-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.536918-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "mJT/v0j+DQCvLc9xDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : " `%ignorecase;` : This directive generates a case-insensitive scanner. "
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.536921-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.536921-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "m5T/v0j+DQCvLgvPDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`%glr;` : Generates a GLR(1) parser instead of the standard LALR(1) parser. GLR parsers can handle ambiguous grammars by parsing all possible interpretations."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.536925-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.536925-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "npT/v0j+DQCvL2hODwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`%id` : The `%id` directive generates `Id` methods in the scanner that returns the scanner's id for the token."
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.536927-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.536927-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "oJT/v0j+DQCvMATHDwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`%left`, `%right`, `%nonassoc`: These directives tell SmaCC how to handle some ambiguous productions. The `%left` directive specifies that we should perform a reduce action instead of a shift so that an expression such as \"1 + 2 +  3\" is parsed as \"(1 + 2) + 3\" instead of \"1 + (2 + 3)\".  The `%right` directive performs the shift action instead of the reduction so the expression is parsed as \"1 + (2 + 3)\". The `%nonassoc` directive specifies that it should be an error if this case occurs. For example, you might want to throw an error if you try to do multiple comparisons: \"1 <= 2 <= 3\".  These directives can occur multiple times in a file. Items that occur later in the file will have priority over items that occur earlier. "
						},
						{
							"__type" : "textSnippet",
							"children" : {
								"__type" : "snippets",
								"items" : [ ]
							},
							"createEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"createTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.536929-05:00"
								}
							},
							"editEmail" : {
								"__type" : "email",
								"emailString" : "<unknown>"
							},
							"editTime" : {
								"__type" : "time",
								"time" : {
									"__type" : "dateAndTime",
									"dateAndTimeString" : "2025-10-24T07:51:49.536929-05:00"
								}
							},
							"uid" : {
								"__type" : "uid",
								"uidString" : "opT/v0j+DQCvMaX+DwF/yQ=="
							},
							"paragraphStyle" : {
								"__type" : "textStyle"
							},
							"string" : "`%nfa;` : SmaCC generates the regular expressions into methods on the scanner class. For large grammars, this can create an extremely large scanner class. The `%nfa` directive makes the scanner that is driven by the nfa created from the regular expressions. This scanner is quite a bit slower than the method based scanners, but can be faster to generate. When an nfa scanner is run for the first time, it builds the nfa from the grammar at stores it in the scanner class. "
						}
					]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.536907-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-24T07:51:49.536907-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "jZT/v0j+DQCvK2ldDwF/yQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "In addition to the `%root`, `%prefix`, `%suffix`, and `%hierarchy` listed above, SmaCC has other directives to control code generation."
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-10-24T07:49:09.791541-05:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-10-24T07:49:16.782749-05:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "SmaCC grammar"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "160e7ab6-48fe-0d00-aea5-31d90f017fc9"
	}
}